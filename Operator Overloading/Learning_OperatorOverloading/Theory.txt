In C#, operator overloading allows you to define or modify the behavior of operators (+, -, *, etc.)
for your custom types (like classes or structs). 
This enables instances of those types to be used with operators in a way that makes sense for that specific type.

How to Overload Operators in C#
To overload an operator, you must define a static method in the class or struct that the operator works with. 
The method's name is prefixed with the operator keyword, followed by the operator symbol. 
The parameters depend on the operator you are overloading.

Example of Operator Overloading
Let’s say we have a class Point that represents a point in a 2D space. We can overload the + and - operators to add or subtract two points.
using System;

public class Point
{
    public int X { get; set; }
    public int Y { get; set; }

    // Constructor
    public Point(int x, int y)
    {
        X = x;
        Y = y;
    }

    // Overload the + operator
    public static Point operator +(Point p1, Point p2)
    {
        return new Point(p1.X + p2.X, p1.Y + p2.Y);
    }

    // Overload the - operator
    public static Point operator -(Point p1, Point p2)
    {
        return new Point(p1.X - p2.X, p1.Y - p2.Y);
    }

    // Override ToString for easier display
    public override string ToString()
    {
        return $"({X}, {Y})";
    }
}

public class Program
{
    public static void Main()
    {
        Point p1 = new Point(3, 4);
        Point p2 = new Point(1, 2);

        // Using the overloaded + operator
        Point resultAdd = p1 + p2;
        Console.WriteLine($"p1 + p2 = {resultAdd}");

        // Using the overloaded - operator
        Point resultSub = p1 - p2;
        Console.WriteLine($"p1 - p2 = {resultSub}");
    }
}


Explanation:
    We define the + operator by overloading it inside the Point class. 
    The + operator takes two Point instances as parameters and returns a new Point whose coordinates are the sum of the two points' coordinates.
    Similarly, we define the - operator to subtract the coordinates of two Point instances.
    This allows us to use + and - operators with Point objects just like we would with primitive types.

List of Overloadable Operators

Here is a list of operators that can be overloaded in C#:

    Arithmetic operators: +, -, *, /, %
    Comparison operators: ==, !=, <, >, <=, >=
    Logical operators: &, |, ^, !, &&, ||
    Increment/Decrement operators: ++, --
    Indexing operator: []
    Conversion operators: explicit, implicit

Important Notes:
    Unary vs Binary Operators: Unary operators (like !, ++, --) work on one operand, while binary operators (like +, -, *, etc.) work on two.
    Symmetry with Comparison Operators: When you overload one of the comparison operators (e.g., ==), 
    it’s a good practice to also overload the opposite one (e.g., !=).
    Cannot Overload Certain Operators: Some operators, like &&, ||, [], +=, *=, cannot be overloaded directly.

Operator Overloading in Real-World Scenarios
    Vectors and Matrices: You might overload +, -, *, and / to make vector or matrix arithmetic more intuitive.
    Complex Numbers: You could overload arithmetic operators to handle complex number operations.
    Custom String Handling: Overloading the + operator to concatenate objects representing some form of text or documents.

If you have a specific class or case where you want to use operator overloading, feel free to ask!


-------------------------------------------------------------------------

[Music] hi and welcome i know i said the next tutorial released on this channel would be an example of building an asp.net core web application using c-sharp and net 5. i envisage that this tutorial may take some time to complete so i've decided to release a few shorter videos while the web development tutorial is under construction as it were so this particular video demonstrates how we can overload the double equals operator i have already demonstrated in a previous video how we are able to overload the plus operator
in a tutorial that was part of the c-sharp for beginners course a link to this video has been included below in the description overloading the double equals operator is a little bit more involved than overloading the plus operator for content like this and much more please consider subscribing and please ring the bell so that you'll be notified of future content if at any point you like this video please give it a thumbs up it will be greatly appreciated so let's get into it in this example we are going to overload the double
equals operator for a class used for the storage of data pertaining to an employee so let's create an employee class let's create three properties for our employee class just a quick tip you can type prop and then press the tab key twice and visual studio will automatically generate template code for the relevant property so let's create an id property as int a first name property as string and a last name property as string okay so let's write the code to overload the double equals operator let's create a public static method that
returns a boolean value it is important to note that the operator keyword and the double equals operator are included in the relevant method signature we can then write our custom code for the relevant method which will tell the compiler how to establish equality between two objects instantiated from this employee type so let's say that when two employee objects are compared using the double equals operator from calling client code that if the id property values for each of the relevant employee objects are
compared and are equal this will mean that the relevant employee objects are equal so when the id properties of the relevant employee objects are equal this method will return true conversely false is returned when the id properties of the relevant employee objects are not equal you can see that there is a red squiggly line under the double equals in our method definition this means the compiler is flagging an error because we are missing something so it is important to note that when we overload the double equals operator
we also need to overload the exclamation mark equals operator the compiler is complaining because we must overload the exclamation mark equals operator if we have overloaded the double equals operator in the relevant class the exclamation mark equals operator of course represents the converse functionality of the functionality coded within the method that overloads the double equals operator so let's duplicate the method that overloads the double equals operator and appropriately modify the code to represent the converse of the
functionality implemented in the method that overloads the double equals operator okay let's test the code in our main method let's create code to instantiate two employee objects now we should be able to compare our two employee objects within an if statement using the double equals operator like this when we do this the code that we implemented to overload the double equals operator should be run so if the two employee objects are equal let's output an appropriate message to the screen let's include an else statement and
output an appropriate message when the relevant two employee objects are deemed as not equal you can see that the data for each of our employee objects is identical let's run the code great this is an expected result so the operator overload functionality is working we also need to make sure that the equals method that is part of the system.
object root class from which all c-sharp types ultimately inherit is overridden in our employee class this is so that the functionality we have coded to override the double equals operator and the code written to override the exclamation mark equals operator within our employee class is consistent with the functionality run when calling client code invokes an employee object's equals method to test the relevant employee object's equality against another employee object let's run the code and a null reference exception is thrown
the null reference exception has been thrown because we are currently using the exclamation mark equals operator within the equals method override to compare an employee object to null so as you can see this is resulting in our method that we have created to overload the exclamation mark equals operator to be called the second argument of this method has been passed a null value we are not currently handling nulls for our arguments and a null reference exception is thrown so firstly let's get rid of the runtime
casting operation that we are doing in the equals method we will add code to handle nulls at the end of this tutorial for now let's write code and use generics to strongly type the equals method so that we can avoid the need for runtime casting we can do this by making our employee class implement the i equitable generic interface and pass in the employee type as an argument to the relevant i equitable generic interface so next we need to implement code for the generic i equitable interfaces equals method so let's do this
you can see that the parameter definition for the equals method is strongly typed as employee this means we don't need to perform runtime casting against an argument defined as object which can cause runtime errors to occur and we no longer get the null reference exception great so the other method of the system.
object class that we should override is the get hash code method the significance of hash codes are beyond the scope of this tutorial and will be the subject of an upcoming tutorial i have included links below in the description to content that can help you with your understanding of the significance of hash codes so let's perform a quick test of our implementation of the equals method great so let's say there is a requirement to include the employee's first name property in our custom equality functionality so let's include a
comparison of the relevant employee object's first name properties appropriately in our code let's test our code great let's say that we want the
relevant first name property comparison code to be case insensitive so to do this we can pass in the string comparison dot ordinal ignore case enum list item value into the relevant equals methods second parameter like this let's run the code great let's write code to include the same comparison functionality that we have implemented for the relevant employee object's first name properties for the relevant employee object's last name properties great lastly let's ensure that nulls are
handled appropriately and calling client code it is quite common for developers to include code to check if an object is null or not null whatever the case may be using either the double equals operator or the exclamation mark equals operator at the moment if the caller client code performs such operations on objects derived from our employee class a null reference exception would be thrown this is because we are currently not handling nulls we could just write code to handle a null reference exception but let's rather handle nulls through
implementing appropriate code logic let's first implement the appropriate code for the method we have created to overload the double equals operator in our employee class let's write code so that if both the relevant employee objects are null true is returned let's write code that if one of the employee objects is null and the other employee object is not null that false is returned then we need to handle nulls within the
method that we have implemented to overload the exclamation mark equals operator in our employee class this code simply implements the converse functionality of the relevant code that we have implemented for the method that overloads the double equals operator let's also ensure that we write code to appropriately handle nulls in the equals method great so we have used the
object.referenceequals method to handle nulls we can implement cleaner code for this purpose we can use the is operator instead the ability to handle nulls using the is operator has been available since the release of c-sharp version 7. notice that visual studio is hinting that there is a better way to handle nulls by displaying a dotted line under the reference equals method calls so let's hover our mouse pointers over the relevant dotted lines and use the visual studio facility provided to us to appropriately modify our code
[Music] [Music] excellent i hope you have enjoyed this tutorial please consider subscribing for more content like this and much more and please ring the bell so that you'll be notified of future content please feel free to share this video with anyone you feel may benefit from its content if you liked this video please give it a thumbs up it'll be greatly appreciated i really enjoy reading your comments so please feel free to engage with me in the comments section the code created in this tutorial is available on github
a link to the relevant repository is available below in the description thank you and take [Music] [Music] you






























-------------------------------------------------

operator overloading this tutorial will be a quick insight into operator overloading and follows from the last tutorial which provided an overview on c-sharp operators through the demonstration of code examples this tutorial will provide one code example this will be a short tutorial to highlight that it is possible to overload operators in c-sharp the purpose of this application is to create a new rectangle which will contain the dimensions of two other rectangles added together so we could encapsulate this functionality in a
method that accepts two rectangle objects as parameters and returns a new rectangle containing the sum of the two rectangles dimensions but there is a cleaner solution which encapsulates the same functionality using c-sharp operator overloading we're going to overload the plus operator for the rectangle objects and then simply add the two rectangle objects together by implementing the plus operator for this purpose once we have overloaded the plus operator for the rectangle class we will be able to simply apply the plus
operator between two rectangle objects so let's first create our rectangle class let's define two integer public fields at the top of the class which will contain the width and height dimensions of rectangle objects derived from this class the fact that these fields of public means their values can be accessed from code outside the rectangle class let's then create the constructor for the rectangle class the constructor must be given the same name as the class the constructor must not return a value this constructor will
accept two parameters namely integer parameters to store the rectangles width and height within the constructor code is written to assign the parameter values to the public fields of this class right so we want to write code that will enable the overloading of the plus operator for rectangle objects so this code will basically look like a method but in order for this code to enable operator overloading it must obey certain rules we must use the static keyword followed by the type of object we wish to return as the result for the
plus operation applied between the two rectangle operands then we must follow this with the operator keyword and then follow this with the operator symbol that represents the operator we wish to overload in this case it is the plus operator now we want to add two objects of the rectangle type together so this operator overload method will accept two objects of type rectangle as parameters we'll name the first parameter rect one and the second parameter rect two right now we are ready to implement our add operation code this code will be
called when the plus operator is applied between any two objects instantiate it from the rectangle class and the code is very simple we simply instantiate a new object of type rectangle in the construction of this object we pass in the added width dimensions of the two rectangles passed into the operator overload method two the width parameter of the rectangle we are creating we also pass in the added height dimension of the two rectangle objects passed to the operator overload method two the object of type rectangle that we
are creating once the new rectangle object has been created we simply write the code to return the new rectangle object we've now successfully implemented operator overloading right let's write the code to test this in our main method so we'll first create two objects both of type of rectangle the first rectangle named rect one as a width dimension of 12 and a heart dimension of 10 the second rectangle named rx2 has a width dimension of five and a height dimension of two so let's create codes that will
appropriately add these two rectangles together and create a new object of type rectangle through an addition operation so because we have enabled the plus operates to be overloaded for any object of type rectangle we are able to add the dimensions of rect one direct to by simply applying the plus operator between the two rectangle objects and return a value from this operation through an object reference variable of type rectangle this rectangle object reference variable is named ricked result let's write the code to output a
simple narrative showing the addition operation applied to two rectangle objects along with the result of the add operation you and the result is as expected the new rectangle represents a width dimension of 17 which is twelve plus five and a hot dimension of twelve which is ten plus two I hope you have enjoyed this short video this code can be downloaded from github details or below in the description please hit the thumbs up icon if you feel you have gained value from this tutorial and please subscribe if you
already subscribed please hit the bell icon to be notified of future content which will be coming soon I look forward to your comments thank you
