



----------------------------------------------------

hi and welcome this is the first part of a series of videos on file handling in c-sharp this video series tutorial will be comprised of five parts which will include this video which is an introduction to file handling in C sharp handling text files in C sharp handling binary files in C sharp handling memory streams in C sharp and using the filesystemwatcher class in c-sharp this series of videos is the 22nd and final part of this C sharp for beginners course once the C sharp for beginners course is completed this channel will
produce a free advanced course on c-sharp please skip the subscribe button and ring the bell so that you can be notified of future releases Brian to file handling and c-sharp with the release of the cross-platform dead runtimes namely dotnet core and mono one set of code written in c-sharp can potentially run on multiple types of platforms for example your code might implement basic functionality that simply writes to a text file and reads text from the text file if you want this code to run on multiple platforms like
for example Android Mac OS Linux iOS as well as Windows the best way to ensure that your code will run on these platforms is to reference the standard libraries these libraries contain common components across multiple versions of the dotnet runtimes namely versions of the.
net framework dotnet core and mono runtimes Microsoft provides us with a project template that contains a reference the standard libraries that will be supported on multiple diverse platforms please view this webpage which contains comprehensive content including this useful table that is a breakdown of how components in versions of the dotnet standard intersect with for example versions of the dotnet framework dotnet core and mono runtimes so I'm going to demonstrate creating a solution that contains a project with a reference to the dotnet standard libraries and I'm
first going to do this on a Mac platform so let's firstly invoke the Visual Studio 2019 for Mac IDE note that I'll mostly be using Windows throughout this video series for code demonstrations on file handling and c-sharp but seeing as we are talking about cross-platform portability of c-sharp code I thought it would be appropriate to create this basic example on a different platform than Windows I'll then put this code to a Windows platform so that we can test the c-sharp code that leverages the standard
libraries on two different platforms let's click the new option note that there are items in the left pane under the heading marked multi-platform under this item we can select the item marked library then in the middle pane we can select the item marked dotnet standard library let's then click the next button now we are being prompted to select which version of the dotnet standard we wish to choose for this project ok for this project let's select the latest version of the dotnet standard installed on this
computer ie version 2.1 let's click the next button and name this project basic file handling c-sharp let's click the Create button and as you can see Visual Studio has now created an infrastructure for our project based on the.net standard library project template if we look at the left pane and click the arrow next to the R to mark dependencies a node marked framework is presented underneath dependencies let's click the arrow next to the R to mark framework and under the art Mobb framework you can see a reference to net
standard library version 2.1 point 0 so this means we are referencing the appropriate standard dotnet libraries in our project excellent so we have effectively created a cross-platform infrastructure for our code using the.net standard library version 2.1 point 0 so let's remove the default class file that has been included by default and our standard library project by visual studio so right-click the r2 marked class 1 in the left pane then select the context menu item marked remove so this dialog box is
giving us the option to remove the class 1 project from our project or delete this file from our hard drive let's select the delete option let's create a new class so let's right-click the project node in the left window pane let's select the add context menu item then let's select the new class context menu item so in the left pane of the new file dialog box ensure that the item marked general is selected in the middle pane let's select the r2 marked empty class let's name this class text file
functions let's then click the button marked new great and we can now update our new class with our code for this introduction to file handling and c-sharp let's keep the functionality of this class very basic at the top of the code let's create a read-only string member variable named underscore root path and assign it the return value from the app domain current domain dot base directory property let's create a string member variable named filename and give it a default literal value of text file example1 txt
let's update the constructor which includes a string parameter let's name the string parameter file name the code within the constructor simply assigns the passed in value to the member variable named underscore file name let's create a basic method let's name this method write text to file it does not return a value and contains one parameter this parameter is defined as an array of strings each of the string items in this array will denote a new line of text that will be written to the target text file let's create a new
object of type stream writer you can see that there is a red squiggly line under the streamwriter class reference this is because at the moment our code does not contain the appropriate system dot IO namespace directive the streamwriter class is part of the system dot IO namespace so one way of including a directive indicating that we wish to use the member of the system dot IO namespace in our code in Visual Studio is to hover our mouse pointers over the red squiggly line and then select the link marked show potential fixes and
then select the using system dot IO popup menu option so this effectively adds the using system dot IO directive at the top of our code this directive could have of course been included manually let's use the path dot combined methods to combine the file name and the directory path as one string and pass this as a value representing our target text file as the first argument to the streamwriter constructor note that path is a public static class that resides in the system dot IO namespace and the combine method is a public static method
that is a member of the path static class the second argument we are passing to the streamwriter constructor is a boolean value let's set this value to true to indicate that when we write a line of text to the target text file that we do not wish to overwrite an existing file but rather wish to append the text to the end of the existing file note that if the target file does not yet exist code within the stream writer class will automatically create the target text file so we have written the code that will instantiate the streamwriter object
the reference to this instantiated object is named output file let's create for each Lib code to traverse the string items in the lines string array within the for each loop let's include code that calls the right line method on the instantiated streamwriter object to write each line in the lines array to the target text file no tell we have included code that both instantiates the streamwriter class and rats text to our target text file as part of a using block the using statement ensures that the closed method
is called on the streamwriter object once the relevant operations have been performed on the relevant file the streamwriter object implements the are disposable interface which means the object instantiated within the using statement is automatically disposed of once the operations within the using block are completed so this is syntax that provides an elegant way for these essential tasks to be performed without having to write explicit code to accomplish this ie by explicitly calling the close method and subsequently the
dispose method on the streamwriter object note that visual studio has added a dotted line under the using keyword if we hover our mouse pointers over the using keyword a pop-up message states that I can simplify the using statement so if I click the show potential fix link then click the use simple using statement pop up in your item visual studio reformats our code the way the code has been written is perfectly valid but the way the code has been reformatted by visual studio is a little bit more concise so next let's write a
method that will read all the text currently in our text file and return this content as a string to the calling code great so in the interests of time I'm going to go fairly quickly through the next part of this video so don't worry about following along a link to all the code created in this tutorial can be found below in the description so here I'm adding a dotnet core console project that references the dotnet called 3.
0 dotnet runtime written and this project will serve as the calling client code for the code we have just created in our basic file handling c-sharp dotnet standard project let's name this project to playing with files so I'm going to fast forward the writing of this code you let's make sure that we include a
reference to our basic file handling c-sharp standard library project which contains the file handling code we created earlier and include a directive at the top of our code - the basic file handling c-sharp namespace you to summarize this code prompts the user for the name of the target text file then prompts the user for three lines of text these three lines of text are written to the target text file all the text than the target text file is then read into a string the screen is cleared and the text is displayed to the console
screen so let's test this code you great okay I'm going to upload the solution to github using github Desktop for Mac you I'm now going to use remote desktop to move on to my Windows PC and use github desktop for Windows to clone the project that we created on the Mac platform from the appropriate github repository you
let's then open our solution in Visual Studio for Windows you let's first make sure that the play with files dotnet core console project is set as the starter project in our solution note that a class library project cannot run on its own let's run the code on the Windows platform you [Music]
great I hope you've enjoyed this introduction to file handling and c-sharp I know the last part of this tutorial skimmed the surface on a few aspects fairly quickly but we will be going into more detail regarding file handing and c-sharp and the subsequent parts of this tutorial if you enjoyed this video please consider subscribing and leaving a like it will be greatly appreciated please feel free to share this video with anyone you feel may benefit from its content the code created in this tutorial can be
downloaded from github pc a link to the appropriate repository below in the description in the next part of this tutorial we'll go a bit deeper into handling text files in c-sharp thank you and take care [Music]

